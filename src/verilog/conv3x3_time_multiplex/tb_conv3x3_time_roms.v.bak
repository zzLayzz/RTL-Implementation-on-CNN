`timescale 1ns/1ps

module tb_conv3x3_roms;
  //------------------------------------------------------------------------
  // Parameters (match your design)
  //------------------------------------------------------------------------
  localparam DATA_WIDTH        = 8;
  localparam NUM_FILTERS       = 32;
  localparam FILTER_ADDR_WIDTH = $clog2(NUM_FILTERS);
  localparam VEC_WIDTH         = 9 * DATA_WIDTH;  // 9 weights per filter
  localparam BIAS_WIDTH        = DATA_WIDTH;      // 1 bias per filter

  //------------------------------------------------------------------------
  // Clock / Reset
  //------------------------------------------------------------------------
  reg clk = 0;
  reg rst_n = 0;
  always #5 clk = ~clk;            // 100 MHz

  initial begin
    #12 rst_n = 1;                 // release reset after a few ns
  end

  //------------------------------------------------------------------------
  // ROM address drivers & outputs
  //------------------------------------------------------------------------
  reg  [FILTER_ADDR_WIDTH-1:0] addr_vec;
  wire [VEC_WIDTH-1:0]         q_vec;

  reg  [FILTER_ADDR_WIDTH-1:0] addr_bias;
  wire [BIAS_WIDTH-1:0]        q_bias;

  //------------------------------------------------------------------------
  // Instantiate weight‚Äêvector ROM (72-bit wide, 32 entries)
  //------------------------------------------------------------------------
  altsyncram #(
    .operation_mode   ("ROM"),
    .width_a          (VEC_WIDTH),
    .widthad_a        (FILTER_ADDR_WIDTH),
    .numwords_a       (NUM_FILTERS),
    .init_file        ("mif_weights/conv2d_6_kernel_0.mif"),
    .outdata_reg_a    ("UNREGISTERED")
  ) weight_rom (
    .clock0   (clk),
    .address_a(addr_vec),
    .q_a      (q_vec),
    .wren_a   (1'b0)
  );

  //------------------------------------------------------------------------
  // Instantiate bias ROM (8-bit wide, 32 entries)
  //------------------------------------------------------------------------
  altsyncram #(
    .operation_mode   ("ROM"),
    .width_a          (BIAS_WIDTH),
    .widthad_a        (FILTER_ADDR_WIDTH),
    .numwords_a       (NUM_FILTERS),
    .init_file        ("mif_weights/conv2d_6_bias_0.mif"),
    .outdata_reg_a    ("UNREGISTERED")
  ) bias_rom (
    .clock0   (clk),
    .address_a(addr_bias),
    .q_a      (q_bias),
    .wren_a   (1'b0)
  );

  //------------------------------------------------------------------------
  // Run through all addresses, print out the loaded values
  //------------------------------------------------------------------------
  initial begin
    // wait for reset
    @(posedge rst_n);
    #10;
    integer i;

    $display("\n--- Weight Vector ROM Contents ---");
    for (i = 0; i < NUM_FILTERS; i = i + 1) begin
      addr_vec = i;
      #10;  // wait one clock for data
      $display("Filter %0d: wvec = %0h", i, q_vec);
    end

    $display("\n--- Bias ROM Contents ---");
    for (i = 0; i < NUM_FILTERS; i = i + 1) begin
      addr_bias = i;
      #10;
      // display as signed since biases are signed
      $display("Filter %0d: bias = %0d", i, $signed(q_bias));
    end

    $display("\n*** Done loading MIF files ***\n");
    $finish;
  end

endmodule
